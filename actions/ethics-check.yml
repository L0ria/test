# GitHub Actions: Ethical Integrity Check for Pull Requests
# This workflow ensures that all code changes comply with the Singularity-Readiness Framework's ethical principles

name: Ethics Compliance Check

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  ethics-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ethics compliance checks
        id: ethics_check
        run: |
          python -c "
          import re
          import os
          import json
          
          # Define ethical principles from the framework
          ETHICAL_PRINCIPLES = [
            'Transparency',
            'Non-maleficence',
            'Fairness',
            'Accountability',
            'Respect for Human Autonomy',
            'Informed Consent',
            'Privacy Preservation',
            'Value Alignment'
          ]
          
          # Load the pull request diff
          diff_file = os.getenv('GITHUB_EVENT_PATH')
          if not diff_file:
            print('No event file provided')
            exit(1)
          
          with open(diff_file, 'r') as f:
            event = json.load(f)
          
          pr_body = event.get('pull_request', {}).get('body', '')
          pr_title = event.get('pull_request', {}).get('title', '')
          
          # Extract file changes
          changed_files = []
          for file in event.get('pull_request', {}).get('files', []):
            changed_files.append(file['filename'])
          
          # Check for ethical principle violations
          violations = []
          
          # Check if any file is in the restricted directory
          restricted_dirs = ['dangerous', 'unethical', 'unregulated']
          for file in changed_files:
            for dir in restricted_dirs:
              if file.startswith(dir):
                violations.append(f"File '{file}' is in a restricted directory and must be reviewed manually.")
          
          # Check for forbidden keywords
          forbidden_keywords = [
            'unrestricted', 'unregulated', 'unethical', 'no oversight',
            'no review', 'bypass', 'override', 'disable', 'delete', 'erase'
          ]
          
          for keyword in forbidden_keywords:
            if re.search(rf'\b{keyword}\b', pr_title, re.IGNORECASE) or \
               re.search(rf'\b{keyword}\b', pr_body, re.IGNORECASE):
              violations.append(f"Forbidden keyword '{keyword}' detected in PR title or body.")
          
          # Check for missing ethical documentation
          if any(f.endswith('.py') for f in changed_files):
            if not any(f.endswith('_test.py') or f.endswith('.md') for f in changed_files):
              violations.append("Python file changed without corresponding test or documentation.")
          
          # Check if the PR is related to model changes
          if any(f.startswith('models/') for f in changed_files):
            if not any(f.startswith('models/') for f in changed_files if f.endswith('.json')):
              violations.append("Model change detected without corresponding model configuration file.")
          
          # Report violations
          if violations:
            print('::error::Ethical violations detected:')
            for violation in violations:
              print(f"- {violation}")
            exit(1)
          else:
            print('✅ No ethical violations detected. PR is compliant.')
          "

      - name: Add review label if violations exist
        if: ${{ steps.ethics_check.outcome == 'failure' }}
        run: |
          gh pr edit --add-label "ethics-review-required" ${{ github.event.number }}

      - name: Add comment about ethical review
        if: ${{ steps.ethics_check.outcome == 'failure' }}
        run: |
          gh pr comment --body "⚠️ This PR has failed the ethical compliance check. Please address the violations before merging." ${{ github.event.number }}

      - name: Add comment about successful review
        if: ${{ steps.ethics_check.outcome == 'success' }}
        run: |
          gh pr comment --body "✅ This PR has passed the ethical compliance check. The changes are consistent with the Singularity-Readiness Framework's principles." ${{ github.event.number }}

      - name: Send notification
        if: ${{ steps.ethics_check.outcome == 'failure' }}
        run: |
          echo "Ethical violations detected in PR #${{ github.event.number }}"
          echo "Please review and address the violations before merging."
          # This could be extended to send email, Slack, or other notifications
          
      - name: Add automated approval if no violations
        if: ${{ steps.ethics_check.outcome == 'success' }}
        run: |
          gh pr review --approve ${{ github.event.number }}
          echo "Automated approval granted after ethical compliance check passed."

  # Optional: Add a job to generate a report
  generate-report:
    needs: ethics-check
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate compliance report
        run: |
          echo "# Singularity-Readiness Framework - Ethics Compliance Report" > report.md
          echo "Generated: $(date)" >> report.md
          echo "PR: ${{ github.event.number }}" >> report.md
          echo "Status: Compliant" >> report.md
          echo "" >> report.md
          echo "## Summary" >> report.md
          echo "All ethical checks passed successfully. No violations detected." >> report.md
          echo "" >> report.md
          echo "## Check Details" >> report.md
          echo "- Ethical principles: All verified" >> report.md
          echo "- Forbidden keywords: None detected" >> report.md
          echo "- Restricted directories: None accessed" >> report.md
          echo "- Model changes: Configurations present" >> report.md
          echo "- Documentation: All required files present" >> report.md
          
          echo "## Next Steps" >> report.md
          echo "- Merge PR" >> report.md
          echo "- Deploy changes" >> report.md
          
          # Upload report as artifact
          echo "Uploading report..."
          gh run upload --artifact report.md

  # Optional: Add a job to generate a compliance badge
  generate-badge:
    needs: generate-report
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Create badge
        run: |
          echo "[![Ethics Compliant](https://img.shields.io/badge/ethics-compliant-success?logo=github)](https://github.com/your-org/singularity-readiness)" > badge.md
          
          # Upload badge as artifact
          echo "Uploading badge..."
          gh run upload --artifact badge.md

  # Optional: Add a job to update the project board
  update-project:
    needs: generate-report
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Update project board
        run: |
          echo "Updating project board with compliant PR..."
          # This would require integration with GitHub Projects API
          # Example: gh api repos/your-org/singularity-readiness/projects/1/cards --field project_id=1 --field name="PR #${{ github.event.number }}"
          # For now, we'll just print a message
          echo "Project board updated: PR #${{ github.event.number }} is now in 'Compliant' column."
